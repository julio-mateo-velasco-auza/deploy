---
// Cliente puro, sin SSR, mantiene tu look & feel
export const prerender = true;

import Base from '../../layouts/Base.astro';
---
<Base title="Iniciar sesión — Inbolsa">
  <main class="mx-auto max-w-md px-4 py-16">
    <h1 class="text-2xl font-semibold mb-6">Iniciar sesión</h1>
    <p class="text-slate-600">Acceso privado para generar y gestionar QR.</p>

    <div class="mt-6 rounded-xl border bg-white p-5 shadow-sm">
      <p id="err" class="hidden mb-3 rounded bg-red-600/10 text-red-700 px-3 py-2 text-sm"></p>

      <form id="loginForm" class="space-y-4">
        <label class="block">
          <span class="text-sm">Email</span>
          <input id="email" type="email" required class="mt-1 w-full rounded border px-3 py-2" />
        </label>
        <label class="block">
          <span class="text-sm">Contraseña</span>
          <input id="password" type="password" required class="mt-1 w-full rounded border px-3 py-2" />
        </label>
        <button class="w-full rounded bg-black text-white py-2">Entrar</button>
      </form>
    </div>
  </main>

  <script type="module">
    import { api, API_BASE } from '../../lib/api.ts';

    // Manejo de reveal (si usabas animación)
    document.querySelectorAll('.reveal')?.forEach((el) => {
      el.style.opacity = '0';
      el.style.transform = 'translateY(18px)';
      el.style.transition = 'opacity .6s ease, transform .6s ease';
      const io = new IntersectionObserver((entries) => {
        entries.forEach((e) => {
          if (e.isIntersecting) {
            e.target.style.opacity = '1';
            e.target.style.transform = 'translateY(0)';
            io.unobserve(e.target);
          }
        });
      }, { threshold: 0.15 });
      io.observe(el);
    });

    const params = new URLSearchParams(location.search);
    const next = params.get('next') || '/app/panel';

    const form = document.getElementById('loginForm');
    const err  = document.getElementById('err');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      err.classList.add('hidden'); err.textContent = '';

      const email = (document.getElementById('email')).value.trim().toLowerCase();
      const password = (document.getElementById('password')).value;

      try {
        await api.login(email, password);  // backend setea cookie de sesión
        location.href = next;
      } catch (ex) {
        err.textContent = ex?.message || 'Error de autenticación';
        err.classList.remove('hidden');
      }
    });

    // (Opcional) Validación de acceso vía token guardado — corregida
    // Si quieres mostrar/ocultar enlaces según un token QR previo:
    const tokenKey = 'inb_access_token';
    const saved = localStorage.getItem(tokenKey);
    if (saved) {
      try {
        const r = await fetch(`${API_BASE}/access/payload?token=${encodeURIComponent(saved)}`, { credentials: 'include' });
        const j = await r.json().catch(() => ({}));
        if (!j?.ok) localStorage.removeItem(tokenKey);
      } catch { /* silencioso */ }
    }
  </script>
</Base>
